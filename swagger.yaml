swagger: '2.0'
info:
  title: Innkeeper (Route Manager)
  description: |
    API for manipulating Fashion Store routes. It allows all teams to access
    and define non-wildcard paths to all relevant users in employee realm as
    well as, some service realm clients (e.g. CMS). Creation of wildcard routes
    is reserved for maintainers of this API as it requires special care.
  version: 2.0.0
host: innkeeper.host.eu
schemes:
  - https
basePath: /
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  company:
    type: oauth2
    authorizationUrl: 'https://auth.provider.com/z/XUI/#login/'
    flow: implicit
    scopes:
      routes.read: |
        Reading (listing) all the routes
      routes.write_full_path: |
        All operations on routes with strict path matching.
      routes.write_regex: |
        All operations on all routes, including ones with regex path matching.
paths:
  '/routes':
    x-swagger-router-controller: "routes"
    get:
      operationId: getRoutes
      security:
        - company:
          - routes.read
      summary: Returns a list of all the routes.
      parameters:
        - name: offset
          in: query
          description: Offset of the returned result set.
          required: false
          type: integer
          format: int64
          minimum: 0
          default: 0
        - name: limit
          in: query
          description: Maximum number of results to return.
          required: false
          type: integer
          format: int64
          minimum: 1
          default: 100
      responses:
        '200':
          description: An array of routes
          headers:
            X-Total-Count:
              description: |
                Total count of entries in the paginated result set.
              type: integer
              format: int64
            Link:
              description: |
                Provides a link to prev / next pages when result is paginated.
                Link: <http://innkeeper.host.eu/routes?offset=5&limit=10>; rel="prev"; title="..."
              type: string
          schema:
            type: array
            items:
              $ref: '#/definitions/RouteOut'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: createRoute
      security:
        - company:
          - routes.write_full_path
          - routes.write_regex
      summary: Creating a route with specified name.
      parameters:
        - name: route
          in: body
          description: Route to add.
          required: true
          schema:
            $ref: '#/definitions/NewRoute'
      responses:
        '201':
          description: The route is created.
          schema:
            $ref: '#/definitions/RouteIn'
          headers:
            Location:
              type: string
              description: Location of the newly created route.
        '403':
          description: |
            Usually happens in a case of insufficient permissions.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/routes/{id}':
    get:
      operationId: getRoute
      security:
        - company:
          - routes.read
      summary: Information about a single route.
      parameters:
        - name: id
          in: path
          type: string
          required: true
      responses:
        '200':
          description: A route with a given `id`.
          schema:
            $ref: '#/definitions/RouteOut'
        '404':
          description: Happens when trying to access a non-existent Route.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: deleteRoute
      security:
        - company:
          - routes.write_full_path
          - routes.write_regex
      summary: Deletes a route
      parameters:
        - name: id
          in: path
          type: string
          required: true
      description: |
        Deleting a route is only allowed for a client that originally defined
        this route or with admin credentials.
      responses:
        '200':
          description: Information about a deleted route
          schema:
            $ref: '#/definitions/RouteOut'
        '403':
          description: |
            Usually happens in a case of insufficient permissions.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Happens when trying to delete a non-existent Route.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/updated-routes/{id}':
    get:
      operationId: getUpdatedRoutes
      security:
        - company:
          - routes.read
      parameters:
        - name: id
          in: path
          type: string
          required: true
          format: ISO-8601
      summary: Returns a list of updated routes.
      responses:
        '200':
          description: An array of routes
          schema:
            type: array
            items:
              $ref: '#/definitions/RouteOut'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
definitions:
  RouteIn:
    required:
      - name
      - route
    properties:
      name:
        type: string
        pattern: /[A-Z][A-Z0-9_]*
        description: The name of the route in the ROUTE_NAME format
      activate_at:
        type: string
        description: The ISO-8601 date time when the route will be activated
      route:
        $ref: '#/definitions/NewRoute'

  RouteOut:
    required:
      - id
      - name
      - route
      - created_at
      - activate_at
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        pattern: \[A-Z][A-Z0-9_]*
        description: The name of the route in the ROUTE_NAME format
      created_at:
        type: string
        description: The ISO-8601 date time when the route has been created
      activate_at:
        type: string
        description: The ISO-8601 date time when the route will be activated
      deleted_at:
        type: string
        description: The ISO-8601 date time when the route has been deleted
      route:
        $ref: '#/definitions/NewRoute'
  NewRoute:
    required:
      - matcher
      - endpoint
    properties:
      matcher:
        $ref: '#/definitions/Matcher'
        description: |
          Definition of the matcher
      filters:
        $ref: '#/definitions/Filter'
        description: |
          Definition of filters to be applied
      endpoint:
        type: string
        description: |
          A valid http(s) endpoint that the request should be routed to
  PathMatcher:
    required:
      - type
      - match
    properties:
      type:
        type: string
        enum:
          - STRICT
          - REGEXP
        description: |
          Defines the type of matching that will be used for a path.
          The usage of REGEXP path is only allowed for users with the routes.write_regex scope
      match:
        type: string
        description: |
          Depending on the `type`, this is either a plain string for `STRICT`
          or ECMA-262 valid regular expression for `REGEXP`.
  HeaderMatcher:
    required:
      - type
      - name
      - value
    description: |
      Array of HTTP headers that are used to match the request, the most common one would probable be “Host”.
    properties:
      type:
        type: string
        enum:
          - STRICT
          - REGEXP
        description: |
          Defines the type of matching that will be used for a header.
          The usage of REGEXP path is only allowed for users with the routes.write_regex scope
      name:
        type: string
        pattern: \w{1,}(-\w{1,})*
        description: HTTP header name
      value:
        type: string
        description: |
          Depending on the `type`, this is either a plain string for `STRICT` or ECMA-262 valid regular expression for `REGEXP`.
  Matcher:
    properties:
      host_matcher:
        type: string
        description: Matches the host of a request
      path_matcher:
        $ref: '#/definitions/PathMatcher'
        description: The path matcher
      method_matcher:
        type: string
        items:
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - HEAD
            - OPTIONS
            - PATCH
        description: HTTP method to match.
      header_matcher:
        type: array
        $ref: '#/definitions/HeaderMatcher'
  Filter:
    required:
      - name
      - args
    properties:
      name:
        type: string
        description: |
          The name of the filter, as it is definined in Skipper
      args:
        type: array
        description: The arguments for the filters, can be string or int32
  Error:
    required:
      - type
      - status
      - title
    properties:
      type:
        type: string
      status:
        type: integer
        format: int32
      title:
        type: string
        description: Short description of an error
      detail:
        type: string
        description: Detailed description of an error
